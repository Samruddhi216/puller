name: Example PR Comment

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  example_comment_pr:
    permissions:
      pull_requests: write
    runs-on: ubuntu-latest
    name: An example job to comment a PR
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get commit timestamp
        id: get_timestamp
        run: |
          # Get latest commit hash
          HASH=$(git rev-parse HEAD)

          # Get commit timestamp in ISO 8601 format
          TIMESTAMP=$(git show -s --format=%ci $HASH)

          # Parse the timestamp
          DATE=$(echo $TIMESTAMP | cut -d' ' -f1)
          TIME=$(echo $TIMESTAMP | cut -d' ' -f2)
          OFFSET=$(echo $TIMESTAMP | cut -d' ' -f3)

          # Export the variables
          echo "DATE=$DATE" >> $GITHUB_ENV
          echo "TIME=$TIME" >> $GITHUB_ENV
          echo "OFFSET=$OFFSET" >> $GITHUB_ENV

      - name: Comment PR with timestamp
        uses: actions/github-script@v6
        with:
          script: |
            const { context, github } = require('@actions/github');
            const prNumber = context.issue.number;
            const { DATE, TIME, OFFSET } = process.env;

            if (!prNumber) {
              console.log('Not running in a PR context.');
              return;
            }

            const commentBody = `
            **Commit Timestamp:**
            - **Date:** ${DATE}
            - **Time:** ${TIME}
            - **Offset:** ${OFFSET}
            `;

            // Check if there are existing comments from this workflow
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });

            const existingComment = comments.data.find(comment => comment.body.includes('Commit Timestamp:'));

            if (existingComment) {
              // Update the existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              // Create a new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
            }
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
